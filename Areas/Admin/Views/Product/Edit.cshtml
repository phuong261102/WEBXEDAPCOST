@model XEDAPVIP.Areas.Admin.ModelsProduct.CreateProductModel
@{
    ViewData["Title"] = "Edit Product";
}

<h1>Edit Product</h1>

<form asp-action="Edit" asp-route-id="@Model.Id" enctype="multipart/form-data" method="post">
    <div class="row">
        <div class="col-md-6">
            <h4>Product</h4>
            <hr />
            <dl class="row">
                <dt class="col-sm-4">
                    @Html.LabelFor(model => model.Name)
                </dt>
                <dd class="col-sm-8">
                    @Html.EditorFor(model => model.Name)
                </dd>
                <dt class="col-sm-4">
                    @Html.LabelFor(model => model.Price)
                </dt>
                <dd class="col-sm-8">
                    @Html.EditorFor(model => model.Price)
                </dd>
                <dt class="col-sm-4">
                    @Html.LabelFor(model => model.DiscountPrice)
                </dt>
                <dd class="col-sm-8">
                    @Html.EditorFor(model => model.DiscountPrice)
                </dd>
                <dt class="col-sm-4">
                    @Html.LabelFor(model => model.BrandId)
                </dt>
                <dd class="col-sm-8">
                    @Html.DropDownListFor(model => model.BrandId, ViewBag.BrandList as SelectList, "Select Brand", new
                        {
                            @class = "form-control"
                        })
                    @Html.ValidationMessageFor(model => model.BrandId, "", new { @class = "text-danger" })
                </dd>
                <dt class="col-sm-4">
                    Main Image
                </dt>
                <dd class="col-sm-8">
                    <div id="mainImagePreviewContainer">
                        @if (!string.IsNullOrEmpty(Model.MainImage))
                        {
                            <img src="~/images/products/@Model.Slug/@Model.MainImage"
                                style="max-width: 200px; margin-bottom: 10px;" />
                        }
                    </div>
                    <input type="file" name="MainImage" id="mainImageInput" />
                </dd>
                <dt class="col-sm-4">
                    Sub Images
                </dt>
                <dd class="col-sm-8">
                    <div id="subImagesContainer">
                        @if (Model.SubImages != null && Model.SubImages.Any())
                        {
                            @foreach (var subImage in Model.SubImages)
                            {
                                <div class="sub-image-item" data-filename="@subImage">
                                    <img src="~/images/products/@Model.Slug/subImg/@subImage"
                                        style="max-width: 100px; margin-right: 10px;" />
                                    <button type="button" class="btn btn-sm btn-danger"
                                        onclick="removeSubImage(this, '@subImage')">Remove</button>
                                </div>
                            }
                        }
                    </div>
                    <div id="subImagesPreview" class="mt-2">
                        <input type="file" name="SubImages" id="subImagesInput" multiple
                            onchange="previewSubImages(event)" />
                    </div>
                    <input type="hidden" name="ExistingSubImages" id="existingSubImages"
                        value="@string.Join(",", Model.SubImages ?? new List<string>())" />
                </dd>

                <dt class="col-sm-4">
                    Categories
                </dt>
                <dd class="col-sm-8">
                    <div class="form-group">
                        <label class="control-label">Chọn danh mục</label>
                        @Html.ListBoxFor(model => model.CategoryId, (MultiSelectList)ViewBag.categories, new
                            {
                                @class = "w-100",
                                id = "selectedCategories"
                            })
                    </div>
                </dd>

            </dl>
        </div>
        <div class="col-md-6">
            <h4>Specifications</h4>
            <hr />
            <dt class="col-sm-4">
                Variants
            </dt>
            <dd class="col-sm-8">
                <table class="table table-striped" id="variantsTable">
                    <thead>
                        <tr>
                            <th>Color</th>
                            <th>Size</th>
                            <th>Quantity</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @for (var i = 0; i < Model.Variants.Count; i++)
                        {
                            <tr>
                                <td>
                                    @Html.EditorFor(model => model.Variants[i].Color, new
                                        {
                                            htmlAttributes = new
                                            {
                                                @class = "form-control"
                                            }
                                        })
                                </td>
                                <td>
                                    @Html.EditorFor(model => model.Variants[i].Size, new
                                        {
                                            htmlAttributes = new
                                            {
                                                @class = "form-control"
                                            }
                                        })
                                </td>
                                <td>
                                    @Html.EditorFor(model => model.Variants[i].Quantity, new
                                        {
                                            htmlAttributes = new
                                            {
                                                @class = "form-control"
                                            }
                                        })
                                </td>
                                <td>
                                    <button type="button" class="btn btn-sm btn-danger"
                                        onclick="removeVariant(this)">Remove</button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
                <button type="button" class="btn btn-primary" id="addVariant">Add Variant</button>
            </dd>
            <dt class="col-sm-4">
                Product Details
            </dt>
            <dd class="col-sm-8">
                <table class="table table-striped" id="productDetailsTable">
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Value</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @{
                            int index = 0;
                        }

                        @foreach (var detail in Model.DetailsDictionary)
                        {
                            <tr>
                                <td>
                                    <input type="text" name="ProductDetails[@index].DetailsName" value="@detail.Key"
                                        class="form-control" />
                                </td>
                                <td>
                                    <input type="text" name="ProductDetails[@index].DetailsValue" value="@detail.Value"
                                        class="form-control" />
                                </td>
                                <td>
                                    <button type="button" class="btn btn-sm btn-danger"
                                        onclick="removeProductDetail(this)">Remove</button>
                                </td>
                            </tr>
                            index++;
                        }
                    </tbody>
                </table>
                <button type="button" class="btn btn-primary" id="addProductDetail">Add Detail</button>
            </dd>
        </div>
    </div>

    <div class="row">
        <div class="col-md-12">
            <h4>Description</h4>
            <hr />
            <dl class="row">
                <dt class="col-sm-2">
                    @Html.LabelFor(model => model.Description)
                </dt>
                <dd class="col-sm-10">
                    @Html.TextAreaFor(model => model.Description, new
                        {
                            @class = "form-control",
                            id = "productDescription"
                        })
                    @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                </dd>
            </dl>
        </div>
    </div>

    <div class="form-group">
        <input type="submit" value="Save" class="btn btn-primary" />
        <a asp-action="Index" class="btn btn-secondary">Cancel</a>
    </div>
</form>

@section Scripts {
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
    <script src="~/lib/multiple-select/multiple-select.min.js"></script>
    <link rel="stylesheet" href="~/lib/multiple-select/multiple-select.min.css" />
    <script>
        function removeSubImage(button, filename) {
            $(button).closest('.sub-image-item').remove();
            var existingSubImages = $('#existingSubImages').val().split(',').filter(item => item !== filename);
            $('#existingSubImages').val(existingSubImages.join(','));
        }

        function previewSubImages(event) {
            var files = event.target.files;
            var container = $('#subImagesContainer');
            for (var i = 0; i < files.length; i++) {
                var file = files[i];
                var reader = new FileReader();
                reader.onload = function (e) {
                    var img = $('<img>').attr('src', e.target.result).css('max-width', '100px').css('margin-right', '10px');
                    var button = $('<button>').addClass('btn btn-sm btn-danger').text('Remove').click(function () {
                        $(this).parent().remove();
                    });
                    var div = $('<div>').addClass('sub-image-item').append(img).append(button);
                    container.append(div);
                };
                reader.readAsDataURL(file);
            }
        }
    </script>
    <script>
        $(document).ready(function () {
            $("#selectedCategories").multipleSelect({
                selectAll: false,
                keepOpen: false,
                isOpen: false,
            });

            // Add Variant
            $('#addVariant').click(function () {
                var variantIndex = $('#variantsTable tbody tr').length;
                var newVariantRow = `
<<<<<<< Updated upstream
                                                                                                                    <tr>
                                                                                                                        <td><input type="text" name="Variants[${variantIndex}].Color" class="form-control" /></td>
                                                                                                                        <td>
                                                                                                                            <select class="form-control" name="Variants[${variantIndex}].Size">
                                                                                                                                <option value="S">S</option>
                                                                                                                                <option value="M">M</option>
                                                                                                                                <option value="L">L</option>
                                                                                                                                <option value="XS">XS</option>
                                                                                                                            </select>
                                                                                                                        </td>
                                                                                                                        <td><input type="number" name="Variants[${variantIndex}].Quantity" class="form-control" /></td>
                                                                                                                        <td><button type="button" class="btn btn-sm btn-danger" onclick="removeVariant(this)">Remove</button></td>
                                                                                                                    </tr>`;
=======
                                                                                                                <tr>
                                                                                                                    <td><input type="text" name="Variants[${variantIndex}].Color" class="form-control" /></td>
                                                                                                                    <td>
                                                                                                                        <select class="form-control" name="Variants[${variantIndex}].Size">
                                                                                                                            <option value="S">S</option>
                                                                                                                            <option value="M">M</option>
                                                                                                                            <option value="L">L</option>
                                                                                                                            <option value="XS">XS</option>
                                                                                                                        </select>
                                                                                                                    </td>
                                                                                                                    <td><input type="number" name="Variants[${variantIndex}].Quantity" class="form-control" /></td>
                                                                                                                    <td><button type="button" class="btn btn-sm btn-danger" onclick="removeVariant(this)">Remove</button></td>
                                                                                                                </tr>`;
>>>>>>> Stashed changes
                $('#variantsTable tbody').append(newVariantRow); // Append to tbody
            });

            // Add Product Detail
            $('#addProductDetail').click(function () {
                var detailIndex = $('#productDetailsTable tbody tr').length;
                var newDetailRow = `
<<<<<<< Updated upstream
                                                                                                                    <tr>
                                                                                                                        <td><input type="text" name="ProductDetails[${detailIndex}].DetailsName" class="form-control" /></td>
                                                                                                                        <td><input type="text" name="ProductDetails[${detailIndex}].DetailsValue" class="form-control" /></td>
                                                                                                                        <td><button type="button" class="btn btn-sm btn-danger" onclick="removeProductDetail(this)">Remove</button></td>
                                                                                                                    </tr>`;
=======
                                                                                                                <tr>
                                                                                                                    <td><input type="text" name="ProductDetails[${detailIndex}].DetailsName" class="form-control" /></td>
                                                                                                                    <td><input type="text" name="ProductDetails[${detailIndex}].DetailsValue" class="form-control" /></td>
                                                                                                                    <td><button type="button" class="btn btn-sm btn-danger" onclick="removeProductDetail(this)">Remove</button></td>
                                                                                                                </tr>`;
>>>>>>> Stashed changes
                $('#productDetailsTable tbody').append(newDetailRow); // Append to tbody
            });
        });


    </script>

    <script>
        $(document).ready(function () {
            $('#mainImageInput').change(function () {
                var reader = new FileReader();

                reader.onload = function (e) {
                    // Create a new image element
                    var img = document.createElement("img");

                    // Set the image source to the result of FileReader
                    img.src = e.target.result;

                    // Optional: Add styles to the image
                    img.style.maxWidth = "200px";
                    img.style.marginBottom = "10px";

                    // Remove old image preview if it exists
                    $('#mainImagePreviewContainer').empty();

                    // Assign an ID to the image element
                    img.id = "mainImagePreview";

                    // Append the new image preview to the container
                    $('#mainImagePreviewContainer').append(img);
                };

                // Read the selected file
                reader.readAsDataURL(this.files[0]);
            });
        });

    </script>


    <script>
        tinymce.init({
            selector: '#productDescription',
            plugins: 'anchor autolink charmap codesample emoticons image link lists media searchreplace table visualblocks wordcount checklist mediaembed casechange export formatpainter pageembed linkchecker a11ychecker tinymcespellchecker permanentpen powerpaste advtable advcode editimage advtemplate ai mentions tinycomments tableofcontents footnotes mergetags autocorrect typography inlinecss markdown',
            toolbar: 'undo redo | blocks fontfamily fontsize | bold italic underline strikethrough | link image media table mergetags | addcomment showcomments | spellcheckdialog a11ycheck typography | align lineheight | checklist numlist bullist indent outdent | emoticons charmap | removeformat',
            tinycomments_mode: 'embedded',
            tinycomments_author: 'Author name',
            mergetags_list: [
                { value: 'First.Name', title: 'First Name' },
                { value: 'Email', title: 'Email' },
            ],
            ai_request: (request, respondWith) => respondWith.string(() => Promise.reject("See docs to implement AI Assistant")),
        });
    </script>

    <partial name="_ValidationScriptsPartial" />
}
