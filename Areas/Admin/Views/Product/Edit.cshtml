@model XEDAPVIP.Areas.Admin.Models.CreateProductModel
@{
    ViewData["Title"] = "Edit Product";
}

<h1>Edit Product</h1>

<form asp-action="Edit" asp-route-id="@Model.Id" enctype="multipart/form-data" method="post">
    <div class="row">
        <div class="col-md-6">
            <h4>Product</h4>
            <hr />
            <dl class="row">
                <dt class="col-sm-4">
                    @Html.LabelFor(model => model.Name)
                </dt>
                <dd class="col-sm-8">
                    @Html.EditorFor(model => model.Name)
                </dd>
                <dt class="col-sm-4">
                    @Html.LabelFor(model => model.Price)
                </dt>
                <dd class="col-sm-8">
                    @Html.EditorFor(model => model.Price)
                </dd>
                <dt class="col-sm-4">
                    @Html.LabelFor(model => model.DiscountPrice)
                </dt>
                <dd class="col-sm-8">
                    @Html.EditorFor(model => model.DiscountPrice)
                </dd>
                <dt class="col-sm-4">
                    @Html.LabelFor(model => model.BrandId)
                </dt>
                <dd class="col-sm-8">
                    @Html.DropDownListFor(model => model.BrandId, ViewBag.BrandList as SelectList, "Select Brand", new
                        {
                            @class = "form-control"
                        })
                    @Html.ValidationMessageFor(model => model.BrandId, "", new { @class = "text-danger" })
                </dd>
                <dt class="col-sm-4">
                    Main Image
                </dt>
                <dd class="col-sm-8">
                    @if (!string.IsNullOrEmpty(Model.MainImage))
                    {
                        <img id="mainImagePreview" src="~/images/products/@Model.Slug/@Model.MainImage" alt="@Model.Name"
                            style="max-width: 200px;" />
                    }
                    <input type="file" name="MainImage" id="mainImageInput" onchange="previewMainImage(event)" />
                </dd>
                <dt class="col-sm-4">
                    Sub Images
                </dt>
                <dd class="col-sm-8">
                    @if (Model.SubImages != null && Model.SubImages.Any())
                    {
                        <div id="subImagesContainer">
                            @foreach (var subImage in Model.SubImages)
                            {
                                <div class="sub-image-item">
                                    <img src="~/images/products/@Model.Slug/subImg/@subImage"
                                        style="max-width: 100px; margin-right: 10px;" />
                                    <button type="button" class="btn btn-sm btn-danger"
                                        onclick="removeSubImage(this)">Remove</button>
                                </div>
                            }
                        </div>
                    }
                    <div id="subImagesPreview" class="mt-2">
                        <input type="file" name="SubImages" multiple onchange="previewSubImages(event)" />
                    </div>
                </dd>


                <dt class="col-sm-4">
                    Categories
                </dt>
                <dd class="col-sm-8">
                    <div class="form-group">
                        <label class="control-label">Chọn danh mục</label>
                        @Html.ListBoxFor(model => model.CategoryId, (MultiSelectList)ViewBag.categories, new
                            {
                                @class = "w-100",
                                id = "selectedCategories"
                            })
                    </div>
                </dd>

            </dl>
        </div>
        <div class="col-md-6">
            <h4>Specifications</h4>
            <hr />
            <dt class="col-sm-4">
                Variants
            </dt>
            <dd class="col-sm-8">
                <table class="table table-striped" id="variantsTable">
                    <thead>
                        <tr>
                            <th>Color</th>
                            <th>Size</th>
                            <th>Quantity</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @for (var i = 0; i < Model.Variants.Count; i++)
                        {
                            <tr>
                                <td>
                                    @Html.EditorFor(model => model.Variants[i].Color, new
                                        {
                                            htmlAttributes = new
                                            {
                                                @class = "form-control"
                                            }
                                        })
                                </td>
                                <td>
                                    @Html.EditorFor(model => model.Variants[i].Size, new
                                        {
                                            htmlAttributes = new
                                            {
                                                @class = "form-control"
                                            }
                                        })
                                </td>
                                <td>
                                    @Html.EditorFor(model => model.Variants[i].Quantity, new
                                        {
                                            htmlAttributes = new
                                            {
                                                @class = "form-control"
                                            }
                                        })
                                </td>
                                <td>
                                    <button type="button" class="btn btn-sm btn-danger"
                                        onclick="removeVariant(this)">Remove</button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
                <button type="button" class="btn btn-primary" id="addVariant">Add Variant</button>
            </dd>
            <dt class="col-sm-4">
                Product Details
            </dt>
            <dd class="col-sm-8">
                <table class="table table-striped" id="productDetailsTable">
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Value</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @{
                            int index = 0;
                        }

                        @foreach (var detail in Model.DetailsDictionary)
                        {
                            <tr>
                                <td>
                                    <input type="text" name="ProductDetails[@index].DetailsName" value="@detail.Key"
                                        class="form-control" />
                                </td>
                                <td>
                                    <input type="text" name="ProductDetails[@index].DetailsValue" value="@detail.Value"
                                        class="form-control" />
                                </td>
                                <td>
                                    <button type="button" class="btn btn-sm btn-danger"
                                        onclick="removeProductDetail(this)">Remove</button>
                                </td>
                            </tr>
                            index++;
                        }
                    </tbody>
                </table>
                <button type="button" class="btn btn-primary" id="addProductDetail">Add Detail</button>
            </dd>
        </div>
    </div>

    <div class="row">
        <div class="col-md-12">
            <h4>Description</h4>
            <hr />
            <dl class="row">
                <dt class="col-sm-2">
                    @Html.LabelFor(model => model.Description)
                </dt>
                <dd class="col-sm-10">
                    @Html.TextAreaFor(model => model.Description, new
                        {
                            @class = "form-control",
                            id = "productDescription"
                        })
                    @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                </dd>
            </dl>
        </div>
    </div>

    <div class="form-group">
        <input type="submit" value="Save" class="btn btn-primary" />
        <a asp-action="Index" class="btn btn-secondary">Cancel</a>
    </div>
</form>

@section Scripts {
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
    <script src="~/lib/multiple-select/multiple-select.min.js"></script>
    <link rel="stylesheet" href="~/lib/multiple-select/multiple-select.min.css" />
    <script>
        $(document).ready(function () {
            $("#selectedCategories").multipleSelect({
                selectAll: false,
                keepOpen: false,
                isOpen: false,
            });

            // Add Variant
            $('#addVariant').click(function () {
                var variantIndex = $('#variantsTable tbody tr').length;
                var newVariantRow = `
                                    <tr>
                                        <td><input type="text" name="Variants[${variantIndex}].Color" class="form-control" /></td>
                                        <td>
                                            <select class="form-control" name="Variants[${variantIndex}].Size">
                                                <option value="S">S</option>
                                                <option value="M">M</option>
                                                <option value="L">L</option>
                                                <option value="XL">XL</option>
                                                <option value="XXL">XXL</option>
                                            </select>
                                        </td>
                                        <td><input type="number" name="Variants[${variantIndex}].Quantity" class="form-control" /></td>
                                        <td><button type="button" class="btn btn-sm btn-danger" onclick="removeVariant(this)">Remove</button></td>
                                    </tr>`;
                $('#variantsTable tbody').append(newVariantRow); // Append to tbody
            });

            // Add Product Detail
            $('#addProductDetail').click(function () {
                var detailIndex = $('#productDetailsTable tbody tr').length;
                var newDetailRow = `
                                    <tr>
                                        <td><input type="text" name="ProductDetails[${detailIndex}].DetailsName" class="form-control" /></td>
                                        <td><input type="text" name="ProductDetails[${detailIndex}].DetailsValue" class="form-control" /></td>
                                        <td><button type="button" class="btn btn-sm btn-danger" onclick="removeProductDetail(this)">Remove</button></td>
                                    </tr>`;
                $('#productDetailsTable tbody').append(newDetailRow); // Append to tbody
            });

            // Function to preview main image
            window.previewMainImage = function (event) {
                var input = event.target;

                if (input.files && input.files[0]) {
                    var reader = new FileReader();

                    reader.onload = function (e) {
                        $('#mainImagePreview').attr('src', e.target.result);
                        $('#mainImagePreview').css('display', 'block');
                    };

                    reader.readAsDataURL(input.files[0]);
                }
            };

            var existingFiles = [];

            // Function to preview sub images
            window.previewSubImages = function (event) {
                var input = event.target;

                if (input.files && input.files.length > 0) {
                    $('#subImagesContainer').html(''); // Clear existing images
                    existingFiles = []; // Reset existingFiles array

                    for (var i = 0; i < input.files.length; i++) {
                        var reader = new FileReader();
                        reader.onload = function (e) {
                            $('#subImagesContainer').append(
                                '<div class="sub-image-item">' +
                                '<img src="' + e.target.result + '" style="max-width: 100px; margin-right: 10px;" />' +
                                '<button type="button" class="btn btn-sm btn-danger" onclick="removeSubImage(this)">Remove</button>' +
                                '</div>'
                            );
                        };

                        reader.readAsDataURL(input.files[i]);
                        existingFiles.push(input.files[i]); // Store file in existingFiles array
                    }
                }
            };

            // Remove sub image
            window.removeSubImage = function (button) {
                $(button).closest('.sub-image-item').remove();
                updateSubImagesInput();
            };

            // Remove variant
            window.removeVariant = function (button) {
                $(button).closest('tr').remove();
            };

            // Remove product detail
            window.removeProductDetail = function (button) {
                $(button).closest('tr').remove();
            };

            // Handle change in sub images input
            $('#subImagesInput').change(function () {
                var selectedFiles = $('#subImagesInput')[0].files;
                var dataTransfer = new DataTransfer();

                // Add existing files to dataTransfer
                existingFiles.forEach(function (file) {
                    dataTransfer.items.add(file);
                });

                // Add newly selected files to dataTransfer
                for (var i = 0; i < selectedFiles.length; i++) {
                    dataTransfer.items.add(selectedFiles[i]);
                }

                // Update #subImagesInput files
                $('#subImagesInput')[0].files = dataTransfer.files;
                updateSubImagesPreview();
            });

            function updateSubImagesPreview() {
                $('#selectedSubImages').empty();

                // Display both existing and new images
                var allFiles = Array.from(existingFiles).concat(Array.from($('#subImagesInput')[0].files));

                allFiles.forEach(function (file, index) {
                    var reader = new FileReader();
                    reader.onload = function (e) {
                        $('#selectedSubImages').append(`
                                            <div class="image-preview" id="image-preview-` + index + `">
                                                <img src="` + e.target.result + `" alt="Image Preview" style="max-width: 100px; margin: 5px;" />
                                                <button type="button" class="btn btn-danger btn-sm remove-image" data-index="` + index + `">Remove</button>
                                            </div>
                                        `);
                    };
                    reader.readAsDataURL(file);
                });
            }

            // Initial preview update
            updateSubImagesPreview();

        });
    </script>

    <script>
        tinymce.init({
            selector: '#productDescription',
            plugins: 'anchor autolink charmap codesample emoticons image link lists media searchreplace table visualblocks wordcount checklist mediaembed casechange export formatpainter pageembed linkchecker a11ychecker tinymcespellchecker permanentpen powerpaste advtable advcode editimage advtemplate ai mentions tinycomments tableofcontents footnotes mergetags autocorrect typography inlinecss markdown',
            toolbar: 'undo redo | blocks fontfamily fontsize | bold italic underline strikethrough | link image media table mergetags | addcomment showcomments | spellcheckdialog a11ycheck typography | align lineheight | checklist numlist bullist indent outdent | emoticons charmap | removeformat',
            tinycomments_mode: 'embedded',
            tinycomments_author: 'Author name',
            mergetags_list: [
                { value: 'First.Name', title: 'First Name' },
                { value: 'Email', title: 'Email' },
            ],
            ai_request: (request, respondWith) => respondWith.string(() => Promise.reject("See docs to implement AI Assistant")),
        });
    </script>
    <script>
        // Initialize multiple select
        $(document).ready(function () {
            $("#selectedCategories").multipleSelect({
                selectAll: false,
                keepOpen: false,
                isOpen: false,
            });
        });
    </script>
    <partial name="_ValidationScriptsPartial" />
}